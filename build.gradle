plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.2'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

allprojects {
	repositories {
		maven { url 'https://jitpack.io' }
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
//    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'com.github.iamport:iamport-rest-client-java:0.2.21'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

}

tasks.named('test') {
	useJUnitPlatform()
}

def frontendDir1 = "$projectDir/src/main/P2F"

sourceSets {
	main {resources { srcDirs = ["$projectDir/src/main/resources"]}}
}

processResources { dependsOn "copyReactHTMLFiles1" }


task installReact1(type: Exec) {
	workingDir "$frontendDir1"
	inputs.dir "$frontendDir1"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "audit", "fix"
		commandLine 'npm.cmd', 'install' }
	else {
		commandLine "npm", "audit", "fix" commandLine 'npm', 'install'
	}
}

// 리액트 설치

task buildReact1(type: Exec) {
	dependsOn "installReact1"
	workingDir "$frontendDir1"
	inputs.dir "$frontendDir1"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "run-script", "build"
	} else {
		commandLine "npm", "run-script", "build"
	}
}

// 리액트 빌드

task copyReactBuildResourceFiles1(type: Copy) {
	dependsOn "buildReact1"
	from "$frontendDir1/build"
	into "$projectDir/src/main/resources/static/P2F"
	exclude "*.html"
}

// 빌드한 리액트 파일을 static/loginpage 폴더로 옮김
// 이 작업은, 컨트롤러에서 이 static 안의 파일을 가리킬 것이기 때문에 필요

task copyReactHTMLFiles1(type: Copy) {
	dependsOn "copyReactBuildResourceFiles1"
	from "$frontendDir1/build/index.html"
	into "$projectDir/src/main/resources/templates/P2F"
}
// Static/loginpage 의 파일은 resources/templates/loginpage 안의 파일들을 가리킨다.
// 때문에, 컨트롤러에서 static의 html을 호출하면, 해당 파일은 리소스 폴더 내의 경로를 가리킨다.